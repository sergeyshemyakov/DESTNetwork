{
  "compiler": {
    "version": "0.8.26+commit.8a97fa7a"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "root",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "groupId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "signalHash",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "nullifierHash",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "externalNullifierHash",
            "type": "uint256"
          },
          {
            "internalType": "uint256[8]",
            "name": "proof",
            "type": "uint256[8]"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "verifyProof"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])": {
          "details": "Note that a double-signaling check is not included here, and should be carried by the caller.",
          "params": {
            "externalNullifierHash": "A keccak256 hash of the external nullifier",
            "groupId": "The id of the Semaphore group",
            "nullifierHash": "The nullifier hash",
            "proof": "The zero-knowledge proof",
            "root": "The of the Merkle tree",
            "signalHash": "A keccak256 hash of the Semaphore signal"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "verifyProof(uint256,uint256,uint256,uint256,uint256,uint256[8])": {
          "notice": "Reverts if the zero-knowledge proof is invalid."
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "@world-id/=lib/world-id-starter-hardhat/contracts/interfaces/",
      "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
      "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "openzeppelin/=lib/openzeppelin-contracts/contracts/",
      "world-id-starter-hardhat/=lib/world-id-starter-hardhat/contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "compilationTarget": {
      "src/StashCampaignFlat.sol": "IWorldID"
    },
    "evmVersion": "paris",
    "libraries": {}
  },
  "sources": {
    "src/StashCampaignFlat.sol": {
      "keccak256": "0xfd6274d3ce744afdf4935f487b1f6366480a115d424af2be83e731488b22c1af",
      "urls": [
        "bzz-raw://944f564111cfdee1cdc8757f648f73b6642b157f564931b7a28e121da828724b",
        "dweb:/ipfs/QmQuWJcC3A18z4JCtizfyMfcQVLWSxQLp3RoCdh3D4hRgP"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}